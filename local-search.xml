<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/22/%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>##模块的加载机制</p><ol><li>优先从缓存中加载<br>模块在第一次加载后会被缓存。 这也意味着多次调用 require() 不会导致模块的代码被执行多次。</li></ol><p>注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。</p><ol start="2"><li>内置模块的加载机制<br>内置模块是由 Node.js 官方提供的模块，内置模块的加载优先级最高。</li></ol><p>例如，require(‘fs’) 始终返回内置的 fs 模块，即使在 node_modules 目录下有名字相同的包也叫做 fs。</p><ol start="3"><li>自定义模块的加载机制<br>使用 require() 加载自定义模块时，必须指定以 ./ 或 …/ 开头的路径标识符。在加载自定义模块时，如果没有指定 ./ 或 …/ 这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。</li></ol><p>同时，在使用 require() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：</p><p>①按照确切的文件名进行加载</p><p>②补全 .js 扩展名进行加载</p><p>③补全 .json 扩展名进行加载</p><p>④补全 .node 扩展名进行加载</p><p>⑤加载失败，终端报错</p><ol start="4"><li>第三方模块的加载机制<br>如果传递给 require() 的模块标识符不是一个内置模块，也没有以 ‘./’ 或 ‘…/’ 开头，则 Node.js 会从当前模块的父目录开始，尝试从 /node_modules 文件夹中加载第三方模块。</li></ol><p>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。</p><p>例如，假设在 ‘C:\Users\itheima\project\foo.js’ 文件里调用了 require(‘tools’)，则 Node.js 会按以下顺序查找：</p><p>① C:\Users\itheima\project\node_modules\tools</p><p>② C:\Users\itheima\node_modules\tools</p><p>③ C:\Users\node_modules\tools</p><p>④ C:\node_modules\tools</p><ol start="5"><li>目录作为模块<br>当把目录作为模块标识符，传递给 require() 进行加载的时候，有三种加载方式：</li></ol><p>①在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性，作为 require() 加载的入口</p><p>②如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件。</p><p>③如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot find module ‘xxx’</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/npm%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/22/npm%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="npm-相关的命令"><a href="#npm-相关的命令" class="headerlink" title="npm 相关的命令"></a>npm 相关的命令</h2><p>1.查看npm的版本信息<br>npm -v</p><p>2.安装第三方包和卸载<br>npm install 包名          (会生成一个node_modules文件目录，所下载的包都放在这个目录里。)<br>npm install 包名@xxx      (下载指定包版本)<br>npm install               (一次性安装所有的依赖包)<br>npm init -y               (生成一个 package.json 文件 里面用来记录您使用 npm install 命令安装了哪些包)<br>npm uninstall 包名        (卸载第三方包)<br>npm list                  (查看项目安装了哪些包)<br>npm install 包名 -D       (安装指定的包，并记录到devDependencies)</p><p>3.切换npm的下包镜像源<br>npm config get registry   (查看当前的下包镜像源)<br>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a><br> (更改 npm 的下载镜像源为淘宝镜像)</p><p>4.nrm<br>npm i nrm -g              (通过npm 包管理器，将 nrm 安装为全局可用的工具)<br>nrm ls                    (查看所有可用的镜像源)<br>nrm use taobao            (将下包的镜像源切为 taobao 镜像) </p><p>5.项目包<br>npm install 包名 -D       (开发依赖包:会被记录到 devDependencies 节点中的包，只在开发期间会用到)<br>npm install 包名          (核心依赖包:被记录到 dependencies 节点中的包，在开发期间和项目上线之后都会用到)</p><p>6.全局包<br>npm install 包名 -g      (全局安装指定的包)<br>npm uninstall 包名 -g    (卸载全局安装的包)</p><p>7.i5ting_toc<br>npm install -g i5ting_toc            (将i5ting_toc安装为全局包)<br>i5ting_toc -f 要转换的md文件路径 -o   (调用i5ting_toc，轻松实现md转html的功能)</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
