<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%EF%BC%8C%E5%88%A4%E6%96%AD%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/02/22/%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%EF%BC%8C%E5%88%A4%E6%96%AD%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="给定一个变量-判断这个变量-值是属于什么类型的"><a href="#给定一个变量-判断这个变量-值是属于什么类型的" class="headerlink" title="给定一个变量, 判断这个变量/值是属于什么类型的"></a>给定一个变量, 判断这个变量/值是属于什么类型的</h1><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">function</span> <span class="hljs-type">IdentifyingDataTypes</span>(data) &#123;<br>    //此处使用typeof来判断是否为object,不是则返回<br>    var <span class="hljs-keyword">type</span> = typeof data;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> !== &#x27;object&#x27;) &#123;<br>        return type<br>    &#125;<br>    //此处利用<span class="hljs-type">Object</span>.proto<span class="hljs-keyword">type</span>.toString().call()来判断数据类型<br>    //因为<span class="hljs-type">Object</span>.proto<span class="hljs-keyword">type</span>.toString().call()方法判断的结果是通常为[object ***],所以使用replace和正则进行分隔<br>    return <span class="hljs-type">Object</span>.proto<span class="hljs-keyword">type</span>.toString.call(data).replace(/^\[object (\<span class="hljs-type">S</span>+)\]$/, &#x27;$1&#x27;)<br>&#125;<br><span class="hljs-title">module</span>.exports = &#123;<br>    <span class="hljs-type">IdentifyingDataTypes</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/22/%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h2><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-number">1.</span>优先从缓存中加载<br>模块在第一次加载后会被缓存。 这也意味着多次调用 <span class="hljs-built_in">require</span>() 不会导致模块的代码被执行多次。<br><br>注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。<br><br><span class="hljs-number">2.</span>内置模块的加载机制<br>内置模块是由 Node.js 官方提供的模块，内置模块的加载优先级最高。<br><br>例如，<span class="hljs-built_in">require</span>(‘fs’) 始终返回内置的 fs 模块，即使在 node_modules 目录下有名字相同的包也叫做 fs。<br><br><span class="hljs-number">3.</span>自定义模块的加载机制<br>使用 <span class="hljs-built_in">require</span>() 加载自定义模块时，必须指定以 ./ 或 …/ 开头的路径标识符。在加载自定义模块时，如果没有指定 ./ 或 …/ 这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。<br><br>同时，在使用 <span class="hljs-built_in">require</span>() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：<br><br>①按照确切的文件名进行加载<br><br>②补全 .js 扩展名进行加载<br><br>③补全 .json 扩展名进行加载<br><br>④补全 .node 扩展名进行加载<br><br>⑤加载失败，终端报错<br><br><br><br><span class="hljs-number">4.</span>第三方模块的加载机制<br>如果传递给 <span class="hljs-built_in">require</span>() 的模块标识符不是一个内置模块，也没有以 ‘./’ 或 ‘…/’ 开头，则 Node.js 会从当前模块的父目录开始，尝试从 /node_modules 文件夹中加载第三方模块。<br><br>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。<br><br>例如，假设在 ‘<span class="hljs-name">C</span>:\Users\itheima\project\foo.js’ 文件里调用了 <span class="hljs-built_in">require</span>(‘tools’)，则 Node.js 会按以下顺序查找：<br><br>① <span class="hljs-name">C</span>:\Users\itheima\project\node_modules\tools<br><br>② <span class="hljs-name">C</span>:\Users\itheima\node_modules\tools<br><br>③ <span class="hljs-name">C</span>:\Users\node_modules\tools<br><br>④ <span class="hljs-name">C</span>:\node_modules\tools<br><br><br><br><span class="hljs-number">5.</span>目录作为模块<br>当把目录作为模块标识符，传递给 <span class="hljs-built_in">require</span>() 进行加载的时候，有三种加载方式：<br><br>①在被加载的目录下查找一个叫做 <span class="hljs-built_in">package</span>.json 的文件，并寻找 main 属性，作为 <span class="hljs-built_in">require</span>() 加载的入口<br><br>②如果目录里没有 <span class="hljs-built_in">package</span>.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件。<br><br>③如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：<span class="hljs-name">Error</span>: Cannot find <span class="hljs-built_in">module</span> ‘xxx’<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/npm%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/22/npm%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="npm-相关的命令"><a href="#npm-相关的命令" class="headerlink" title="npm 相关的命令"></a>npm 相关的命令</h1><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-number">1.</span>查看<span class="hljs-built_in">npm</span>的版本信息<br><span class="hljs-built_in">npm</span> -v<br><br><span class="hljs-number">2.</span>安装第三方包和卸载<br><span class="hljs-built_in">npm</span> install 包名          (会生成一个node_modules文件目录，所下载的包都放在这个目录里。)<br><span class="hljs-built_in">npm</span> install 包名@xxx      (下载指定包版本)<br><span class="hljs-built_in">npm</span> install               (一次性安装所有的依赖包)<br><span class="hljs-built_in">npm</span> init -y               (生成一个 package.json 文件 里面用来记录您使用 <span class="hljs-built_in">npm</span> install 命令安装了哪些包)<br><span class="hljs-built_in">npm</span> uninstall 包名        (卸载第三方包)<br><span class="hljs-built_in">npm</span> list                  (查看项目安装了哪些包)<br><span class="hljs-built_in">npm</span> install 包名 -D       (安装指定的包，并记录到devDependencies)<br><br><span class="hljs-number">3.</span>切换<span class="hljs-built_in">npm</span>的下包镜像源<br><span class="hljs-built_in">npm</span> config get registry   (查看当前的下包镜像源)<br><span class="hljs-built_in">npm</span> config set registry https://registry.<span class="hljs-built_in">npm</span>.taobao.org/<br> (更改 <span class="hljs-built_in">npm</span> 的下载镜像源为淘宝镜像)<br><br><span class="hljs-number">4.</span>nrm<br><span class="hljs-built_in">npm</span> i nrm -g              (通过<span class="hljs-built_in">npm</span> 包管理器，将 nrm 安装为全局可用的工具)<br>nrm ls                    (查看所有可用的镜像源)<br>nrm use taobao            (将下包的镜像源切为 taobao 镜像) <br><br><span class="hljs-number">5.</span>项目包<br><span class="hljs-built_in">npm</span> install 包名 -D       (开发依赖包:会被记录到 devDependencies 节点中的包，只在开发期间会用到)<br><span class="hljs-built_in">npm</span> install 包名          (核心依赖包:被记录到 dependencies 节点中的包，在开发期间和项目上线之后都会用到)<br><br><span class="hljs-number">6.</span>全局包<br><span class="hljs-built_in">npm</span> install 包名 -g      (全局安装指定的包)<br><span class="hljs-built_in">npm</span> uninstall 包名 -g    (卸载全局安装的包)<br><br><span class="hljs-number">7.</span>i5ting_toc<br><span class="hljs-built_in">npm</span> install -g i5ting_toc            (将i5ting_toc安装为全局包)<br>i5ting_toc -f 要转换的md文件路径 -o   (调用i5ting_toc，轻松实现md转html的功能)<br><br><span class="hljs-number">8.</span>登录<br><span class="hljs-built_in">npm</span> login<br><br><span class="hljs-number">9.</span>发布包：<br><span class="hljs-built_in">npm</span> init<br><span class="hljs-built_in">npm</span> publish<br><br><span class="hljs-number">10.</span>撤销发布<br><span class="hljs-built_in">npm</span> -f unpublish dollarphajax@*<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
