<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/25/MySQL%20Workbench%20%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/25/MySQL%20Workbench%20%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL-Workbench-相关命令"><a href="#MySQL-Workbench-相关命令" class="headerlink" title="MySQL Workbench 相关命令"></a>MySQL Workbench 相关命令</h2><h5 id="1-从数据库中查询数据-列入表名称为users"><a href="#1-从数据库中查询数据-列入表名称为users" class="headerlink" title="1.从数据库中查询数据 列入表名称为users"></a>1.从数据库中查询数据 列入表名称为users</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名称(users)<br></code></pre></td></tr></table></figure><h5 id="2-如需获取名为-“username”-和-“password”-的列的内容（从名为-“users”-的数据库表）语法格式如下："><a href="#2-如需获取名为-“username”-和-“password”-的列的内容（从名为-“users”-的数据库表）语法格式如下：" class="headerlink" title="2.如需获取名为 “username” 和 “password” 的列的内容（从名为 “users” 的数据库表）语法格式如下："></a>2.如需获取名为 “username” 和 “password” 的列的内容（从名为 “users” 的数据库表）语法格式如下：</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> 表名称(users)<br></code></pre></td></tr></table></figure><h5 id="3-INSERT-INTO-语句用于向数据表中插入新的数据行，语法格式如下："><a href="#3-INSERT-INTO-语句用于向数据表中插入新的数据行，语法格式如下：" class="headerlink" title="3.INSERT INTO 语句用于向数据表中插入新的数据行，语法格式如下："></a>3.INSERT INTO 语句用于向数据表中插入新的数据行，语法格式如下：</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名称(users) (username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;名称值&#x27;</span>,<span class="hljs-string">&#x27;数字值&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="4-Update-语句用于修改表中的数据。语法格式如下：（将id为5的用户密码，更新为-888）"><a href="#4-Update-语句用于修改表中的数据。语法格式如下：（将id为5的用户密码，更新为-888）" class="headerlink" title="4.Update 语句用于修改表中的数据。语法格式如下：（将id为5的用户密码，更新为 888）"></a>4.Update 语句用于修改表中的数据。语法格式如下：（将id为5的用户密码，更新为 888）</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">update 表名称(users) <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;888&#x27;</span>  where <span class="hljs-attribute">id</span>=5<br></code></pre></td></tr></table></figure><h5 id="5-把-users-表中-id-为-2-的用户密码和用户状态，分别更新为-admin123-和-1-用户名为李华"><a href="#5-把-users-表中-id-为-2-的用户密码和用户状态，分别更新为-admin123-和-1-用户名为李华" class="headerlink" title="5.把 users 表中 id 为 2 的用户密码和用户状态，分别更新为 admin123 和 1  用户名为李华"></a>5.把 users 表中 id 为 2 的用户密码和用户状态，分别更新为 admin123 和 1  用户名为李华</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select  表名称(users) <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;admin123&#x27;</span>,status=1,username=&#x27;李华&#x27; where <span class="hljs-attribute">id</span>=2<br></code></pre></td></tr></table></figure><h5 id="6-从-users-表中，删除-id-为-2-的用户，示例如下："><a href="#6-从-users-表中，删除-id-为-2-的用户，示例如下：" class="headerlink" title="6.从 users 表中，删除 id 为 2 的用户，示例如下："></a>6.从 users 表中，删除 id 为 2 的用户，示例如下：</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名称(users) <span class="hljs-keyword">where</span> id=<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h5 id="7-从-users-表中，查询表中-id-为3的用户："><a href="#7-从-users-表中，查询表中-id-为3的用户：" class="headerlink" title="7.从 users 表中，查询表中 id 为3的用户："></a>7.从 users 表中，查询表中 id 为3的用户：</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select * <span class="hljs-keyword">from</span> 表名称(users) <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h5 id="8-从-users-表中，查询表中-id-大于3的用户"><a href="#8-从-users-表中，查询表中-id-大于3的用户" class="headerlink" title="8.从 users 表中，查询表中 id 大于3的用户"></a>8.从 users 表中，查询表中 id 大于3的用户</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select * <span class="hljs-keyword">from</span> 表名称(users) <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>&gt;<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h5 id="9-从-users-表中，查询表中-id-不为2的用户"><a href="#9-从-users-表中，查询表中-id-不为2的用户" class="headerlink" title="9.从 users 表中，查询表中 id 不为2的用户"></a>9.从 users 表中，查询表中 id 不为2的用户</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select * <span class="hljs-keyword">from</span> 表名称(users) <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>!=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h5 id="10-从-users-表中，查询表中id-3-5的用户"><a href="#10-从-users-表中，查询表中id-3-5的用户" class="headerlink" title="10.从 users 表中，查询表中id 3-5的用户"></a>10.从 users 表中，查询表中id 3-5的用户</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select * <span class="hljs-keyword">from</span> 表名称(users) <span class="hljs-keyword">where</span>  <span class="hljs-built_in">id</span> <span class="hljs-keyword">between</span> <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h5 id="11-从-users-表中，查询表中id大于3-且status为1-的用户"><a href="#11-从-users-表中，查询表中id大于3-且status为1-的用户" class="headerlink" title="11.从 users 表中，查询表中id大于3 且status为1 的用户"></a>11.从 users 表中，查询表中id大于3 且status为1 的用户</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select * <span class="hljs-keyword">from</span> 表名称(users)  <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>&gt;<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> status=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="12-从-users-表中，查询表中id为5-或者-username为uzi-的用户"><a href="#12-从-users-表中，查询表中id为5-或者-username为uzi-的用户" class="headerlink" title="12.从 users 表中，查询表中id为5 或者 username为uzi 的用户"></a>12.从 users 表中，查询表中id为5 或者 username为uzi 的用户</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select * ftom 表名称(users) where <span class="hljs-attribute">id</span>=5 <span class="hljs-keyword">or</span> <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;uzi&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="13-从-users-表中，按照-status-字段进行升序排序-asc默认是升序排列-，示例如下："><a href="#13-从-users-表中，按照-status-字段进行升序排序-asc默认是升序排列-，示例如下：" class="headerlink" title="13.从 users 表中，按照 status 字段进行升序排序(asc默认是升序排列)，示例如下："></a>13.从 users 表中，按照 status 字段进行升序排序(asc默认是升序排列)，示例如下：</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名称(users) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> status <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure><h5 id="14-从-users-表中，按照id-gt-2-的用户并且-status-字段进行升序降序-asc是降序排列-，示例如下："><a href="#14-从-users-表中，按照id-gt-2-的用户并且-status-字段进行升序降序-asc是降序排列-，示例如下：" class="headerlink" title="14.从 users 表中，按照id&gt;2 的用户并且 status 字段进行升序降序 (asc是降序排列)，示例如下："></a>14.从 users 表中，按照id&gt;2 的用户并且 status 字段进行升序降序 (asc是降序排列)，示例如下：</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名称(users) <span class="hljs-keyword">where</span> id&gt;<span class="hljs-number">2</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span><br></code></pre></td></tr></table></figure><h5 id="15-从-users-表中-先按照-status-字段进行降序排序，再按照-username-的字母顺序，进行升序排序，示例如下："><a href="#15-从-users-表中-先按照-status-字段进行降序排序，再按照-username-的字母顺序，进行升序排序，示例如下：" class="headerlink" title="15.从 users 表中,先按照 status 字段进行降序排序，再按照 username 的字母顺序，进行升序排序，示例如下："></a>15.从 users 表中,先按照 status 字段进行降序排序，再按照 username 的字母顺序，进行升序排序，示例如下：</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名称(users) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> status <span class="hljs-keyword">desc</span>,username <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%EF%BC%8C%E5%88%A4%E6%96%AD%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/02/22/%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%EF%BC%8C%E5%88%A4%E6%96%AD%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="给定一个变量-判断这个变量-值是属于什么类型的"><a href="#给定一个变量-判断这个变量-值是属于什么类型的" class="headerlink" title="给定一个变量, 判断这个变量/值是属于什么类型的"></a>给定一个变量, 判断这个变量/值是属于什么类型的</h1><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">function</span> <span class="hljs-type">IdentifyingDataTypes</span>(data) &#123;<br>    //此处使用typeof来判断是否为object,不是则返回<br>    var <span class="hljs-keyword">type</span> = typeof data;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> !== &#x27;object&#x27;) &#123;<br>        return type<br>    &#125;<br>    //此处利用<span class="hljs-type">Object</span>.proto<span class="hljs-keyword">type</span>.toString().call()来判断数据类型<br>    //因为<span class="hljs-type">Object</span>.proto<span class="hljs-keyword">type</span>.toString().call()方法判断的结果是通常为[object ***],所以使用replace和正则进行分隔<br>    return <span class="hljs-type">Object</span>.proto<span class="hljs-keyword">type</span>.toString.call(data).replace(/^\[object (\<span class="hljs-type">S</span>+)\]$/, &#x27;$1&#x27;)<br>&#125;<br><span class="hljs-title">module</span>.exports = &#123;<br>    <span class="hljs-type">IdentifyingDataTypes</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/22/%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h2><h5 id="1-优先从缓存中加载"><a href="#1-优先从缓存中加载" class="headerlink" title="1.优先从缓存中加载"></a>1.优先从缓存中加载</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">模块在第一次加载后会被缓存。 这也意味着多次调用 <span class="hljs-meta">require</span>() 不会导致模块的代码被执行多次。<br><br>注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。<br></code></pre></td></tr></table></figure><h5 id="2-内置模块的加载机制"><a href="#2-内置模块的加载机制" class="headerlink" title="2.内置模块的加载机制"></a>2.内置模块的加载机制</h5><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">内置模块是由 Node<span class="hljs-number">.</span><span class="hljs-keyword">js</span> 官方提供的模块，内置模块的加载优先级最高。<br><br>例如，require(‘<span class="hljs-built_in">fs</span>’) 始终返回内置的 <span class="hljs-built_in">fs</span> 模块，即使在 node_modules 目录下有名字相同的包也叫做 <span class="hljs-built_in">fs</span>。<br></code></pre></td></tr></table></figure><h5 id="3-自定义模块的加载机制"><a href="#3-自定义模块的加载机制" class="headerlink" title="3.自定义模块的加载机制"></a>3.自定义模块的加载机制</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">使用 require<span class="hljs-params">()</span> 加载自定义模块时，必须指定以 <span class="hljs-string">./</span> 或 …/ 开头的路径标识符。在加载自定义模块时，如果没有指定 <span class="hljs-string">./</span> 或 …/ 这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。<br><br>同时，在使用 require<span class="hljs-params">()</span> 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：<br><br>①按照确切的文件名进行加载<br>②补全 <span class="hljs-string">.js</span> 扩展名进行加载<br>③补全 <span class="hljs-string">.json</span> 扩展名进行加载<br>④补全 <span class="hljs-string">.node</span> 扩展名进行加载<br>⑤加载失败，终端报错<br></code></pre></td></tr></table></figure><h5 id="4-第三方模块的加载机制"><a href="#4-第三方模块的加载机制" class="headerlink" title="4.第三方模块的加载机制"></a>4.第三方模块的加载机制</h5><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">如果传递给 require() 的模块标识符不是一个内置模块，也没有以 ‘./’ 或 ‘…/’ 开头，则 Node.js 会从当前模块的父目录开始，尝试从 /node_modules 文件夹中加载第三方模块。<br><br>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。<br><br>例如，假设在 ‘C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\i</span>theima<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\f</span>oo.js’ 文件里调用了 require(‘tools’)，则 Node.js 会按以下顺序查找：<br><br>① C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\i</span>theima<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\t</span>ools<br>② C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\i</span>theima<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\t</span>ools<br>③ C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\t</span>ools<br>④ C:<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\t</span>ools<br></code></pre></td></tr></table></figure><h5 id="5-目录作为模块"><a href="#5-目录作为模块" class="headerlink" title="5.目录作为模块"></a>5.目录作为模块</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">当把目录作为模块标识符，传递给 <span class="hljs-built_in">require</span>() 进行加载的时候，有三种加载方式：<br><br>①在被加载的目录下查找一个叫做 <span class="hljs-built_in">package</span>.json 的文件，并寻找 main 属性，作为 <span class="hljs-built_in">require</span>() 加载的入口<br><br>②如果目录里没有 <span class="hljs-built_in">package</span>.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件。<br><br>③如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot <span class="hljs-built_in">find</span> <span class="hljs-built_in">module</span> ‘xxx’<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/npm%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/22/npm%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="npm-相关的命令"><a href="#npm-相关的命令" class="headerlink" title="npm 相关的命令"></a>npm 相关的命令</h1><h5 id="1-查看npm的版本信息"><a href="#1-查看npm的版本信息" class="headerlink" title="1.查看npm的版本信息"></a>1.查看npm的版本信息</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> -v<br></code></pre></td></tr></table></figure><h5 id="2-安装第三方包和卸载"><a href="#2-安装第三方包和卸载" class="headerlink" title="2.安装第三方包和卸载"></a>2.安装第三方包和卸载</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install 包名          (会生成一个node_modules文件目录，所下载的包都放在这个目录里。)<br><span class="hljs-built_in">npm</span> install 包名@xxx      (下载指定包版本)<br><span class="hljs-built_in">npm</span> install               (一次性安装所有的依赖包)<br><span class="hljs-built_in">npm</span> init -y               (生成一个 package.json 文件 里面用来记录您使用 <span class="hljs-built_in">npm</span> install 命令安装了哪些包)<br><span class="hljs-built_in">npm</span> uninstall 包名        (卸载第三方包)<br><span class="hljs-built_in">npm</span> list                  (查看项目安装了哪些包)<br><span class="hljs-built_in">npm</span> install 包名 -D       (安装指定的包，并记录到devDependencies)<br></code></pre></td></tr></table></figure><h5 id="3-切换npm的下包镜像源"><a href="#3-切换npm的下包镜像源" class="headerlink" title="3.切换npm的下包镜像源"></a>3.切换npm的下包镜像源</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">get</span> <span class="hljs-title">registry</span>   <span class="hljs-params">(查看当前的下包镜像源)</span></span><br><span class="hljs-function">npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org/ (更改 npm 的下载镜像源为淘宝镜像)</span></span><br></code></pre></td></tr></table></figure><h5 id="4-nrm"><a href="#4-nrm" class="headerlink" title="4.nrm"></a>4.nrm</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">npm</span> <span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">nrm</span> <span class="hljs-selector-tag">-g</span>              (通过npm 包管理器，将 nrm 安装为全局可用的工具)<br><span class="hljs-selector-tag">nrm</span> <span class="hljs-selector-tag">ls</span>                    (查看所有可用的镜像源)<br><span class="hljs-selector-tag">nrm</span> <span class="hljs-selector-tag">use</span> <span class="hljs-selector-tag">taobao</span>            (将下包的镜像源切为 taobao 镜像) <br></code></pre></td></tr></table></figure><h5 id="5-项目包"><a href="#5-项目包" class="headerlink" title="5.项目包"></a>5.项目包</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> 包名 -D       (开发依赖包:会被记录到 devDependencies 节点中的包，只在开发期间会用到)<br>npm <span class="hljs-keyword">install</span> 包名          (核心依赖包:被记录到 dependencies 节点中的包，在开发期间和项目上线之后都会用到)<br></code></pre></td></tr></table></figure><p>6.全局包</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install 包名 -g      (全局安装指定的包)<br><span class="hljs-built_in">npm</span> uninstall 包名 -g    (卸载全局安装的包)<br></code></pre></td></tr></table></figure><h5 id="7-i5ting-toc"><a href="#7-i5ting-toc" class="headerlink" title="7.i5ting_toc"></a>7.i5ting_toc</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install -g i<span class="hljs-number">5</span>ting_toc            (将i<span class="hljs-number">5</span>ting_toc安装为全局包)<br><span class="hljs-attribute">i5ting_toc</span> -f 要转换的md文件路径 -o   (调用i<span class="hljs-number">5</span>ting_toc，轻松实现md转html的功能)<br></code></pre></td></tr></table></figure><h5 id="8-登录"><a href="#8-登录" class="headerlink" title="8.登录"></a>8.登录</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> login<br></code></pre></td></tr></table></figure><h5 id="9-发布包："><a href="#9-发布包：" class="headerlink" title="9.发布包："></a>9.发布包：</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init<br><span class="hljs-built_in">npm</span> publish<br></code></pre></td></tr></table></figure><h5 id="10-撤销发布"><a href="#10-撤销发布" class="headerlink" title="10.撤销发布"></a>10.撤销发布</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">npm -f unpublish <span class="hljs-symbol">dollarphajax@</span>*<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
